package p018;

import dev.morphia.mapping.Mapper;
import java.io.File;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Hashtable;
import java.util.List;
import org.luaj.vm2.Globals;
import org.luaj.vm2.lib.jse.JsePlatform;

/* renamed from: luajc */
/* loaded from: grasscutter.jar:luajc.class */
public class C5229luajc {
    private static final String version = "Luaj-jse 3.0.1 Copyright (C) 2012 luaj.org";
    private static final String usage = "usage: java -cp luaj-jse.jar,bcel-5.2.jar luajc [options] fileordir [, fileordir ...]\nAvailable options are:\n  -        process stdin\n  -s src\tsource directory\n  -d dir\tdestination directory\n  -p pkg\tpackage prefix to apply to all classes\n  -m\t\tgenerate main(String[]) function for JSE\n  -r\t\trecursively compile all\n  -l\t\tload classes to verify generated bytecode\n  -c enc  \tuse the supplied encoding 'enc' for input files\n  -v   \tverbose\n";
    private String srcdir;
    private String destdir;
    private boolean genmain;
    private boolean recurse;
    private boolean verbose;
    private boolean loadclasses;
    private String encoding;
    private String pkgprefix;
    private List files = new ArrayList();
    private Globals globals;

    /* access modifiers changed from: package-private */
    /* renamed from: luajc$1 */
    /* loaded from: grasscutter.jar:luajc$1.class */
    public static class C52301 {
    }

    /* access modifiers changed from: package-private */
    /* renamed from: luajc$InputFile */
    /* loaded from: grasscutter.jar:luajc$InputFile.class */
    public class InputFile {
        public String luachunkname;
        public String srcfilename;
        public File infile;
        public File outdir;
        public String javapackage;
        private final C5229luajc this$0;

        public InputFile(C5229luajc luajc, File file, File file2, String str) {
            this.this$0 = luajc;
            this.infile = file2;
            String replace = str != null ? str.replace('.', '/') : null;
            String stringBuffer = replace != null ? new StringBuffer().append(C5229luajc.access$000(luajc)).append("/").append(replace).toString() : C5229luajc.access$000(luajc);
            this.javapackage = str;
            this.srcfilename = new StringBuffer().append(replace != null ? new StringBuffer().append(replace).append("/").toString() : "").append(this.infile.getName()).toString();
            this.luachunkname = new StringBuffer().append(replace != null ? new StringBuffer().append(replace).append("/").toString() : "").append(this.infile.getName().substring(0, this.infile.getName().lastIndexOf(46))).toString();
            this.infile = file2;
            this.outdir = new File(stringBuffer);
        }
    }

    /* access modifiers changed from: private */
    /* renamed from: luajc$LocalClassLoader */
    /* loaded from: grasscutter.jar:luajc$LocalClassLoader.class */
    public static final class LocalClassLoader extends ClassLoader {

        /* renamed from: t */
        private final Hashtable f3097t;

        private LocalClassLoader(Hashtable hashtable) {
            this.f3097t = hashtable;
        }

        @Override // java.lang.ClassLoader
        public Class findClass(String str) throws ClassNotFoundException {
            byte[] bArr = (byte[]) this.f3097t.get(str);
            return bArr != null ? defineClass(str, bArr, 0, bArr.length) : findClass(str);
        }

        LocalClassLoader(Hashtable hashtable, C52301 r5) {
            this(hashtable);
        }
    }

    private static void usageExit() {
        System.out.println(usage);
        System.exit(-1);
    }

    public static void main(String[] strArr) throws IOException {
        new C5229luajc(strArr);
    }

    private C5229luajc(String[] strArr) throws IOException {
        this.srcdir = Mapper.IGNORED_FIELDNAME;
        this.destdir = Mapper.IGNORED_FIELDNAME;
        this.genmain = false;
        this.recurse = false;
        this.verbose = false;
        this.loadclasses = false;
        this.encoding = null;
        this.pkgprefix = null;
        ArrayList arrayList = new ArrayList();
        int i = 0;
        while (i < strArr.length) {
            if (!strArr[i].startsWith("-")) {
                arrayList.add(strArr[i]);
            } else {
                switch (strArr[i].charAt(1)) {
                    case 'c':
                        i++;
                        if (i >= strArr.length) {
                            usageExit();
                        }
                        this.encoding = strArr[i];
                        continue;
                    case 'd':
                        i++;
                        if (i >= strArr.length) {
                            usageExit();
                        }
                        this.destdir = strArr[i];
                        continue;
                    case 'e':
                    case 'f':
                    case 'g':
                    case 'h':
                    case 'i':
                    case 'j':
                    case 'k':
                    case 'n':
                    case 'o':
                    case 'q':
                    case 't':
                    case 'u':
                    default:
                        usageExit();
                        continue;
                    case 'l':
                        this.loadclasses = true;
                        continue;
                    case 'm':
                        this.genmain = true;
                        continue;
                    case 'p':
                        i++;
                        if (i >= strArr.length) {
                            usageExit();
                        }
                        this.pkgprefix = strArr[i];
                        continue;
                    case 'r':
                        this.recurse = true;
                        continue;
                    case 's':
                        i++;
                        if (i >= strArr.length) {
                            usageExit();
                        }
                        this.srcdir = strArr[i];
                        continue;
                    case 'v':
                        this.verbose = true;
                        continue;
                }
            }
            i++;
        }
        if (this.verbose) {
            System.out.println(version);
            System.out.println(new StringBuffer().append("srcdir: ").append(this.srcdir).toString());
            System.out.println(new StringBuffer().append("destdir: ").append(this.destdir).toString());
            System.out.println(new StringBuffer().append("files: ").append(arrayList).toString());
            System.out.println(new StringBuffer().append("recurse: ").append(this.recurse).toString());
        }
        if (arrayList.size() <= 0) {
            System.err.println(usage);
            System.exit(-1);
        }
        for (int i2 = 0; i2 < arrayList.size(); i2++) {
            collectFiles(new StringBuffer().append(this.srcdir).append("/").append(arrayList.get(i2)).toString());
        }
        if (this.files.size() <= 0) {
            System.err.println(new StringBuffer().append("no files found in ").append(arrayList).toString());
            System.exit(-1);
        }
        this.globals = JsePlatform.standardGlobals();
        int size = this.files.size();
        for (int i3 = 0; i3 < size; i3++) {
            processFile((InputFile) this.files.get(i3));
        }
    }

    private void collectFiles(String str) {
        File parentFile;
        File file = new File(str);
        if (file.isDirectory() && this.recurse) {
            scandir(file, this.pkgprefix);
        } else if (file.isFile() && (parentFile = file.getAbsoluteFile().getParentFile()) != null) {
            scanfile(parentFile, file, this.pkgprefix);
        }
    }

    private void scandir(File file, String str) {
        for (File file2 : file.listFiles()) {
            scanfile(file, file2, str);
        }
    }

    private void scanfile(File file, File file2, String str) {
        if (!file2.exists()) {
            return;
        }
        if (file2.isDirectory() && this.recurse) {
            scandir(file2, str != null ? new StringBuffer().append(str).append(Mapper.IGNORED_FIELDNAME).append(file2.getName()).toString() : file2.getName());
        } else if (file2.isFile() && file2.getName().endsWith(".lua")) {
            this.files.add(new InputFile(this, file, file2, str));
        }
    }

    /*  JADX ERROR: JadxRuntimeException in pass: BlockProcessor
        jadx.core.utils.exceptions.JadxRuntimeException: Unreachable block: B:38:0x01ff
        	at jadx.core.dex.visitors.blocks.BlockProcessor.checkForUnreachableBlocks(BlockProcessor.java:86)
        	at jadx.core.dex.visitors.blocks.BlockProcessor.processBlocksTree(BlockProcessor.java:52)
        	at jadx.core.dex.visitors.blocks.BlockProcessor.visit(BlockProcessor.java:44)
        */
    private void processFile(p018.C5229luajc.InputFile r8) {
        /*
        // Method dump skipped, instructions count: 619
        */
        throw new UnsupportedOperationException("Method not decompiled: p018.C5229luajc.processFile(luajc$InputFile):void");
    }

    static String access$000(C5229luajc luajc) {
        return luajc.destdir;
    }
}
